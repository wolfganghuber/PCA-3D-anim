---
title: "Animation for teaching PCA"
author: "Wolfgang Huber"
date: "`r date()`"
format:
  html:
    embed-resources: false
    page-layout: full
    toc: true
    css: wh.css
highlight-style: tango
---


![Animated PCA of athletes data](pca-animation.gif)


```{r}
library("plot3D")
library("animation")
library("MASS")
```

```{r}
#| label: turtles
#| eval: false
#| echo: false
turtles = read.table("/Users/whuber/clones/MSMB-Quarto/data/PaintedTurtles.txt", header = TRUE)
variables = c("length", "width", "height")
mat = as.matrix(turtles[, variables])
```
```{r}
#| label: decathlon
data("olympic", package = "ade4")
athletes = setNames(olympic$tab, 
  c("m100", "long", "weight", "high", "m400", "m110", "disc", "pole", "javel", "m1500"))
variables = c("m100", "weight", "m400")
mat = as.matrix(athletes[, variables])
```

```{r}
smat = scale(mat, center = TRUE, scale = TRUE)
pca = prcomp(smat, scale. = FALSE, center = FALSE)
```

Create an animated 3D PCA visualization, rotating and projecting principal components.

```{r}
#| label: view
view = function(
  theta,
  phi = 20,
  num_axes = 0,
  colplane = "#606060",
  surf = NULL
  ) {
  expand_axes = 1.4
  if (length(phi) == 1)   
    phi = rep(phi, length(theta))
  if (length(theta) == 1) 
    theta = rep(theta, length(phi))
  stopifnot(length(theta) == length(phi))
  for (i in seq_along(theta)) {
    scatter3D(
      x = smat[, 1],
      y = smat[, 2],
      z = smat[, 3],
      xlab = colnames(smat)[1], 
      ylab = colnames(smat)[2], 
      zlab = colnames(smat)[3],
      xlim = max(abs(smat[, 1])) * c(-1, +1) * expand_axes,
      ylim = max(abs(smat[, 2])) * c(-1, +1) * expand_axes,
      zlim = max(abs(smat[, 3])) * c(-1, +1) * expand_axes,
      pch = 19, 
      cex = 1, 
      col = "blue",
      main = NULL, 
      bty = "g", 
      theta = theta[i]/pi*180, 
      phi = phi[i]/pi*180, 
      surf = surf
    ) # scatter3D
    if (is.null(surf)) {
      # draw PC axes as lines
      ax_scale = 2
      for(a in seq_len(num_axes)) {
        lines3D(
          x = pca$rotation[1, a] * ax_scale * c(-1,1), 
          y = pca$rotation[2, a] * ax_scale * c(-1,1),
          z = pca$rotation[3, a] * ax_scale * c(-1,1),
          col = "#606060", lwd = 2, add = TRUE
        ) # lines3D
        text3D(
          x = abs(pca$rotation[1, a]) * ax_scale, 
          y = abs(pca$rotation[2, a]) * ax_scale,
          z = abs(pca$rotation[3, a]) * ax_scale,
          labels = paste0("PC", a),
          col = "#000000", add = TRUE
        ) # text3D
      } # for a
    } # if
    # for debugging
    # text3D(x=0, y=0, z=0, labels=paste(round(c(theta[i], phi[i])/pi*180), collapse = ":"), col = "red", add = TRUE ) 
  } # for i
} # function view
```

```{r}
#| label: thesurf
expand_plane = 2.7
M = mesh(expand_plane * seq(-1, 1, by = 0.1), 
         expand_plane * seq(-1, 1, by = 0.1))
theplane = list(
  x = pca$rotation[1, 1] * M$x + pca$rotation[1, 2] * M$y,  
  y = pca$rotation[2, 1] * M$x + pca$rotation[2, 2] * M$y,  
  z = pca$rotation[3, 1] * M$x + pca$rotation[3, 2] * M$y,
  shade = 0.3, 
  border = NA, facets = NA, col = "#d0d0d080"
)
theta1 = pi
phi1   = 17/180*pi
normalvec = pca$rotation[, 3]
phi2   = asin(normalvec[3]) 
theta2 = pi - atan2(normalvec[1], normalvec[2]) 
```

Open an animation device, do the choreography.

```{r}
#| label: saveGIF
#| message: false
#| results: "hide"
nframe = 120
saveGIF({ 
  view(theta = seq(-theta1, theta1, length.out = nframe), phi = phi1)
  view(theta = seq(-theta1, theta1, length.out = nframe), phi = phi1, num_axes = 1)
  view(theta = seq(-theta1, theta1, length.out = nframe), phi = phi1, num_axes = 2)
  view(theta = seq(-theta1, theta1+pi, length.out = nframe), phi = phi1, surf = theplane)
  view(theta = seq(theta1+pi, theta2, length.out = nframe), phi = seq(phi1, phi2, length.out = nframe), surf = theplane)
  view(theta = rep(theta2, nframe/3), phi = rep(phi2, nframe/3), surf = theplane)
  }, 
  interval = 0.05, movie.name = "pca-animation.gif", ani.width = 800, ani.height = 800)
```

# Session Info

```{r}
#| label: sessioninfo
Sys.time()
devtools::session_info()
```