---
title: "Animation for teaching PCA"
author: "Wolfgang Huber"
date: "`r date()`"
format:
  html:
    embed-resources: false
    page-layout: full
    toc: true
    css: wh.css
highlight-style: tango
---

<!-- {{< video pca-animation.mp4 >}} -->

[Code on GitHub](https://github.com/wolfganghuber/PCA-3D-anim)

**To do / What should be done**:
3D raytracing scene with data as cloud of (metallic) points, together with their original coordinate system. Light source at infinity, 2D plane 'on the floor', showing the shadows of the points. Varianceometers (e.g., barplots) that shows variance components for 1st and 2nd axis of the plane, and residual variance. Point cloud rotating until variances along 1st and 2nd axis are optimized.

```{r}
#| label: loadpkgs
#| message: false
#| warning: false
library("rayrender")
library("animation")
library("RSpincalc")
library("assertthat")
```

For more on the decathlon data, see [the MSMB book](https://www.huber.embl.de/msmb/07-chap.html#what-are-the-data-matrices-and-their-motivation).

```{r}
#| label: decathlon
data("olympic", package = "ade4")
athletes = setNames(olympic$tab, c("m100", "long", "weight", "high", "m400", "m110", "disc", "pole", "javel", "m1500"))
variables = c("m100", "weight", "m400")
mat = as.matrix(athletes[, variables])
```

```{r}
#| label: dopca
smat = scale(mat, center = TRUE, scale = TRUE)
pca = prcomp(smat, scale. = FALSE, center = FALSE)

assert_that(are_equal(smat %*% pca$rotation, pca$x, check.attributes = FALSE))
if(det(pca$rotation) < 0) {
  pca$rotation[,3] = -pca$rotation[,3] 
  pca$x[,3] = -pca$x[,3]
  assert_that(are_equal(smat %*% pca$rotation, pca$x, check.attributes = FALSE))
}
assert_that(are_equal(EA2DCM(DCM2EA(pca$rotation)), pca$rotation, check.attributes = FALSE))
```


1. Implement rotation, but for only 3 points show the spheres to save time
2. Add variance barplots in separate PNG
3. Combine using imagemagick
4. Loop and maximize first PC1, then PC2

```{r}
#| fig-width: 5
#| fig-height: 5
#| out-width: "100%"
#| label: scene

ax_orig  = 4 * c(-1, -1, -1)
ax_len = 2
var_axes = diag(x = 1, nrow = 3) * ax_len
pc_axes  = cbind(c(ax_orig[1],          -10, ax_orig[3]),
                 c(ax_orig[1] + ax_len, -10, ax_orig[3]),
                 c(ax_orig[1],          -10, ax_orig[3]+ ax_len))
pointcol = "#2b6eff"

angles2mat = function (theta, phi, r = 1)
  rbind(c( cos(phi), 0, sin(phi)),
        c(        0, 1,        0),
        c(-sin(phi), 0, cos(phi))) %*%
  rbind(c(1,          0,           0),
        c(0, cos(theta), -sin(theta)),
        c(0, sin(theta),  cos(theta)))
  

scene = generate_ground(material = 
                          #metal(color = "#cccccc"), 
                           diffuse(color = "#cccccc"), 
                        depth= - 10)

for(i in seq_len(nrow(pca$x)))
  scene = with(pca, add_object(scene, 
      sphere(x = x[i, 1], 
            y = x[i, 2],
            z = x[i, 3],
            radius = 0.15,
            material = glossy(color = pointcol, reflectance = 0.05))))

for(i in 1:3) {
  astart = ax_orig
  aend   = ax_orig + var_axes[, i]
  scene = add_object(scene, 
     arrow(start = astart, 
           end = aend, 
           tail_proportion = 0.9,
           radius_top = 0.1, 	
           radius_tail =  0.05,
           material = diffuse(color=pointcol))) 
  # add_object(text3d(paste0(i), x = atext[1], y = atext[2], z = atext[3], text_height = 1.6, orientation = c("xy", "xy", "xy")[i], material = diffuse(color="yellow")))
}

for(i in 1:2)
  scene = add_object(scene, 
     arrow(start = pc_axes[, 1], 
           end =   pc_axes[, i+1], 
           tail_proportion = 0.9, 
           radius_top = 0.1, 	
           radius_tail =  0.05,
           material = diffuse(color="black")))

scene = add_object(scene, sphere(y = 40, material = light(intensity = 1000)))

render_scene(scene, parallel = TRUE, 
             width = 400, height = 400, samples = 128,
 #            width = 600, height = 600, samples = 512,
             lookfrom = c(0, 50, 10),  lookat = c(0, 0, 0), clamp_value=8)

plot(1:10)
```

# Session Info

```{r}
#| label: sessioninfo
Sys.time()
devtools::session_info()
```



```{r}
#| label: animate
#| eval: false
# Set up the folder to save frames
dir.create("frames")

# Number of frames
num_frames <- 60

# Render each frame with a slightly different angle
for (i in seq_len(num_frames)) {
  # Calculate the position of the sphere in each frame (for example, rotating around the y-axis)
  angle <- i * (2 * pi / num_frames)
  x_pos <- 3 * cos(angle)
  z_pos <- 3 * sin(angle)
  
  # Update the scene with the new position of the sphere
  animated_scene <- add_object(base_scene, sphere(x = x_pos, y = 1, z = z_pos, radius = 1, material = diffuse(color = "blue")))
  
  # Render the scene and save the frame as an image
  render_scene(animated_scene, samples = 100, width = 800, height = 800, 
               filename = sprintf("frames/frame_%03d.png", i))
}
```
```{sh}
#| label: ffmpeg
#| eval: false
ffmpeg -framerate 30 -i frames/frame_%03d.png -c:v libx264 -pix_fmt yuv420p animation.mp4
```