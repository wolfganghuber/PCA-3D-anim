---
title: "Animation for teaching PCA"
author: "Wolfgang Huber"
date: "`r date()`"
format:
  html:
    embed-resources: false
    page-layout: full
    toc: true
    css: wh.css
highlight-style: tango
---

<!-- {{< video pca-animation.mp4 >}} -->

[Code on GitHub](https://github.com/wolfganghuber/PCA-3D-anim)

**To do**:
Varianceometers (e.g., barplots) that shows variance components for 1st and 2nd axis of the plane, and residual variance. Point cloud rotating until variances along 1st and 2nd axis are optimized.

# Load packages

```{r}
#| label: loadpkgs
#| message: false
#| warning: false
library("rayrender")
library("animation")
library("RSpincalc") # for Euler angles <-> SO(3): DCM2EA, EA2DCM
library("assertthat")
library("dplyr")
library("ggplot2")
library("EBImage")
```

# Data: Decathlon

For more on the decathlon data, see [the MSMB book](https://www.huber.embl.de/msmb/07-chap.html#what-are-the-data-matrices-and-their-motivation).

```{r}
#| label: decathlon
data("olympic", package = "ade4")
athletes = setNames(olympic$tab, c("m100", "long", "weight", "high", "m400", "m110", "disc", "pole", "javel", "m1500"))
variables = c("m100", "weight", "m400")
mat = as.matrix(athletes[, variables])
```

# Do the PCA

```{r}
#| label: dopca
#| results: "hide"
smat = scale(mat, center = TRUE, scale = TRUE)
pca = prcomp(smat, scale. = FALSE, center = FALSE)
```
Make sure the rotation has positive determinant and extract Euler angles representation.
```{r}
#| label: Eulerangles
#| results: "hide"
assert_that(are_equal(smat %*% pca$rotation, pca$x, check.attributes = FALSE))
if(det(pca$rotation) < 0) {
  pca$rotation[,3] = -pca$rotation[,3] 
  pca$x[,3] = -pca$x[,3]
  assert_that(are_equal(smat %*% pca$rotation, pca$x, check.attributes = FALSE))
}
pca_angles = DCM2EA(pca$rotation)
assert_that(are_equal(EA2DCM(pca_angles), pca$rotation, check.attributes = FALSE))
```

# Animation parameters / setup

```{r}
#| label: animsetup
# devsize = c(width = 400, height1 = 400, height2 = 200)
devsize = c(width = 500, height1 = 500, height2 = 200)
samples = 300 # 128
nframes = 2

var_ax_orig  = c(-3, -3, +3)
var_axes = diag(x = 1, nrow = 3) * 2
var_axes[, 3] = -var_axes[, 3]

pc_ax_orig  = c(-4, -10, +4)
pc_axes  = rbind(c( 1,  0),
                 c( 0,  0),
                 c( 0, -1)) * 1.5
pointcol = "#2b6eff"

frames = tibble(EA = 
  cbind(seq(0, pca_angles[1], length.out = nframes),
        seq(0, pca_angles[2], length.out = nframes),
        seq(0, pca_angles[3], length.out = nframes)))

outdir = "frames"
if (file.exists(outdir))
     unlink(outdir, recursive = TRUE)
dir.create(outdir)
```

# Animation Loop

```{r}
#| label: animloop
scene_common = 
  generate_ground(material = diffuse(color = "#cccccc", fogdensity = 0, sigma = 0), depth = -10) |>
  add_object(generate_ground(material = light(intensity = 100000), depth = 2500)) 

for (i in 1:2)
   scene_common = add_object(scene_common, 
      rayrender::arrow(start = pc_ax_orig, 
            end =   pc_ax_orig + pc_axes[, i], 
            tail_proportion = 0.9, radius_top = 0.1, radius_tail = 0.05,
            material = diffuse(color = "black")))

for (f in seq_len(nrow(frames))) {
  rot = EA2DCM(frames$EA[f, ])
  pts = smat %*% rot
  
  scene = scene_common
  for(i in seq_len(nrow(pts))) 
    scene = add_object(scene, 
      sphere(x = pts[i, 1], y = pts[i, 2], z = pts[i, 3], radius = 0.15,
             material = glossy(color = pointcol, reflectance = 0.05)))
  
  for(i in 1:3) 
    scene = add_object(scene, 
      rayrender::arrow(
          start = (var_ax_orig) %*% rot, 
          end   = (var_ax_orig + var_axes[, i]) %*% rot, 
          tail_proportion = 0.9, radius_top = 0.1, radius_tail = 0.05,
          material = diffuse(color = pointcol))) 
  
  pngfiles = sprintf("%s/img_%04d_%d.png", outdir, f, 1:3)
  
  render_scene(scene, parallel = TRUE, 
               width = devsize["width"], height = devsize["height1"], samples = samples,
               lookfrom = c(0, 50, 10), lookat = c(0, 0, 0), clamp_value = 8,
               filename = pngfiles[1])
  
  nm = rev(c("axis 1", "axis 2", "residual"))
  
  gg = ggplot(
         tibble(
           what = factor(nm, levels = nm),
           variance = rev(matrixStats::colVars(pts))),
         aes(x = variance, y = what)
        ) + xlim(0, 1.7) + geom_col() + theme(axis.title.y = element_blank())  
  
  ggsave(plot = gg, filename = pngfiles[2], dpi = 150, 
      width  = devsize["width"]   / 150, 
      height = devsize["height2"] / 150, 
      device = "png") 

  imgs = lapply(pngfiles[-length(pngfiles)], readImage)
  dims = sapply(imgs, dim)
  assert_that(all(dims[1, ] == dims[1, 1]),      # same x-dimension 
              all(dims[3, ] %in% c(3L, 4L)))     # rgb or rgb+alpha
  yoff = 0
  res = Image(dim = c(dims[1,1], sum(dims[2,]), 3), colormode = "Color")
  for (i in seq_along(imgs)) {
    res[, yoff + seq_len(dims[2, i]), ] = imgs[[i]][,,1:3]
    yoff = yoff + dims[2, i]
  }
  writeImage(res, file = pngfiles[length(pngfiles)])
} # for f
```

```{sh}
#| label: ffmpeg
#| eval: true
ffmpeg -framerate 30 -i frames/img_%04d_3.png -c:v libx264 -pix_fmt yuv420p animation.mp4
```

# Session Info

```{r}
#| label: sessioninfo
Sys.time()
devtools::session_info()
```



